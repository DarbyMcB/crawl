#!/usr/bin/env python

from __future__ import print_function
import argparse, glob, os, re, sys, toml

## set up help options
parser = argparse.ArgumentParser(description="Make a toml table of game maps "
                                 "to map descriptions for the WebTiles server.")
parser.add_argument("des_dir", nargs=1, metavar="<dir>",
                    help="Dir of DES files from which to make the map.")
parser.add_argument("-o", dest="out_file", metavar="<file>",
                    help="the output file.", default=None)
parser.add_argument("-q", action='store_true', dest="quiet",
                    help="only pring warnings/errors.", default=False)

args = parser.parse_args()
des_dir = args.des_dir[0].rstrip("/")
## When the toml output file is unspecified, try to use the des dir for the
## file prefix, falling back to "game_maps"
out_file = args.out_file
if out_file is None:
    file_pref = os.path.basename(os.path.abspath(des_dir))
    if file_pref == "":
        file_pref = "game_maps"
    out_file = "{0}/{1}.toml".format(des_dir, file_pref)

des_files = glob.glob("{0}/*.des".format(des_dir))
if not len(des_files):
    sys.exit("No .des files found in directory {0}".format(des_dir))

game_maps = []
for f in des_files:
    try:
        fh = open(f, "rU")
    except EnvironmentError as e:
        sys.exit("Can't open DES file {0} ({1})".format(f, e.strerror))
    name_re = re.compile("^NAME:\s*(\w+)\s*$")
    desc_re = re.compile("^DESC:\s*(.+)$")
    order_re = re.compile("^ORDER:\s*(\d+)\s*$")
    map_name = None
    map_desc = None
    map_order = -1
    for line in fh:
        if map_name is None:
            m = name_re.search(line)
            if m:
                map_name = m.group(1)
                continue
        elif map_desc is None:
            m = desc_re.search(line)
            if m:
                map_desc = m.group(1)
                continue
        elif map_order == -1:
                m = order_re.search(line)
                if m:
                    map_order = m.group(1)
        else:
            break

    fh.close()
    if map_name is None:
        sys.exit("Can't find a map name in DES file {0}".format(f))
    if map_desc is None:
        sys.exit("Can't find a map description in DES file {0}".format(f))
    game_maps.append({"name" : map_name.rstrip(),
                      "description" : map_desc.rstrip(),
                      "order" : int(map_order)})

game_maps.sort(key = lambda x: x["order"])
for m in game_maps:
    del m["order"]
toml_out = {"maps" : game_maps}

try:
    out_fh = open(out_file, "w")
except EnvironmentError as e:
    sys.exit("Can't write to output file {0} ({1})".format(out_file,
                                                           e.strerror))
comments = ["# toml map of DES map names to map descriptions for "
            "directory {0}".format(des_dir),
            "# this file was autogenerated by game_map.py"]
out_fh.write("\n".join(comments) + "\n")
toml.dump(toml_out, out_fh)
out_fh.close()
if not args.quiet:
    print("Wrote map file with {0} entries to {1}".format(len(game_maps),
                                                          out_file))
